import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';

class UploadResultPage extends StatefulWidget {
  final String detectedImageUrl;
  final List<String> words;
  final File imageFile;

  UploadResultPage({
    this.detectedImageUrl = "http://10.0.2.2:8010/static/detected_image.jpg",
    required this.words,
    required this.imageFile,
  });

  @override
  _UploadResultPageState createState() => _UploadResultPageState();
}

class _UploadResultPageState extends State<UploadResultPage> {
  Map<String, String> wordDefinitions = {};
  Map<String, String> wordExamples = {};
  Set<String> _selectedWords = {};

  final FlutterTts flutterTts = FlutterTts();

  Future<void> _speak(String word) async {
    List<dynamic> languages = await flutterTts.getLanguages;

    if (languages.contains("en-US")) {
      await flutterTts.setLanguage("en-US");
    } else {
      print("‚ö†Ô∏è Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ ng√¥n ng·ªØ en-US!");
      return;
    }

    await flutterTts.setPitch(1.0);
    await flutterTts.setSpeechRate(0.45);
    await flutterTts.speak(word);
  }

  @override
  void initState() {
    super.initState();

    flutterTts.getLanguages.then((langs) {
      print("üì¢ H·ªá th·ªëng h·ªó tr·ª£ c√°c ng√¥n ng·ªØ: $langs");
    });

    _fetchWordMeanings();
  }

  // G·ªçi API t·ª´ ƒëi·ªÉn ƒë·ªÉ l·∫•y phi√™n √¢m & nghƒ©a ƒë∆°n gi·∫£n Ti·∫øng Vi·ªát
  Future<void> _fetchWordMeanings() async {
    const dictionaryApiUrl = "https://api.dictionaryapi.dev/api/v2/entries/en/";
    const translateApiUrl =
        "https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=vi&dt=t&q=";
    String example = "";
    for (String word in widget.words) {
      try {
        var response = await http.get(Uri.parse(dictionaryApiUrl + word));

        if (response.statusCode == 200) {
          var data = jsonDecode(utf8.decode(response.bodyBytes));

          if (data.isNotEmpty && data[0].containsKey("meanings")) {
            String phonetic = data[0]["phonetic"] ?? "";
            String englishMeaning = "";

            // L·∫•y nghƒ©a ƒë∆°n gi·∫£n nh·∫•t (∆∞u ti√™n danh t·ª´ n·∫øu c√≥)
            for (var meaning in data[0]["meanings"]) {
              if (meaning["partOfSpeech"] == "noun" &&
                  meaning["definitions"].isNotEmpty) {
                englishMeaning = meaning["definitions"][0]["definition"];
                example =
                    meaning["definitions"][0]["example"] ?? ""; // ‚úÖ g√°n gi√° tr·ªã
                break;
              }
            }

            // N·∫øu kh√¥ng t√¨m th·∫•y danh t·ª´, l·∫•y nghƒ©a ƒë·∫ßu ti√™n c√≥ th·ªÉ
            if (englishMeaning.isEmpty && data[0]["meanings"].isNotEmpty) {
              englishMeaning =
                  data[0]["meanings"][0]["definitions"][0]["definition"];
              example =
                  data[0]["meanings"][0]["definitions"][0]["example"] ?? "";
            }

            // D·ªãch nghƒ©a sang Ti·∫øng Vi·ªát nh∆∞ng ch·ªâ l·∫•y T·ª™ NG·∫ÆN G·ªåN
            var translationResponse = await http.get(
              Uri.parse(
                translateApiUrl + Uri.encodeComponent(word),
              ), // ch·ªâ d·ªãch t·ª´ g·ªëc
            );

            String vietnameseMeaning = word; // M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng d·ªãch ƒë∆∞·ª£c

            if (translationResponse.statusCode == 200) {
              var translationData = jsonDecode(translationResponse.body);
              vietnameseMeaning =
                  translationData[0][0][0]; // üî• Ch·ªâ l·∫•y nghƒ©a ng·∫Øn g·ªçn
            }

            setState(() {
              wordDefinitions[word] = "$phonetic ‚Üí ${vietnameseMeaning.trim()}";
              // Hi·ªÉn th·ªã nghƒ©a ƒë∆°n gi·∫£n
              wordExamples[word] = example;
            });
          } else {
            setState(() {
              wordDefinitions[word] = "Kh√¥ng t√¨m th·∫•y nghƒ©a.";
            });
          }
        } else {
          setState(() {
            wordDefinitions[word] = "Kh√¥ng t√¨m th·∫•y nghƒ©a.";
          });
        }
      } catch (e) {
        setState(() {
          wordDefinitions[word] = "L·ªói khi l·∫•y d·ªØ li·ªáu.";
        });
      }
    }
  }

  Future<String?> getToken() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return prefs.getString('token'); // üî• Ph·∫£i l∆∞u token v√†o ƒë√¢y khi ƒëƒÉng nh·∫≠p
  }

  // L∆∞u t·ª´ v·ª±ng v√†o m·ª•c √¥n t·∫≠p theo ng√†y hi·ªán t·∫°i
  Future<void> _saveToReview() async {
    String today = DateFormat('yyyy-MM-dd').format(DateTime.now());

    List<Map<String, dynamic>> wordsToSave =
        _selectedWords.map((word) {
          return {
            "word": word,
            "meaning": wordDefinitions[word] ?? "ƒêang t·∫£i...",
            "example": wordExamples[word] ?? "This is a ${word}.",
            "date": today,
          };
        }).toList();

    final url = Uri.parse("http://10.0.2.2:8000/vocab/save_words");
    final token = await getToken(); // üîë L·∫•y t·ª´ storage/shared preferences

    final response = await http.post(
      url,
      headers: {
        "Content-Type": "application/json",
        "Authorization": "Bearer $token",
      },
      body: jsonEncode(wordsToSave),
    );

    if (response.statusCode == 200) {
      print("‚úÖ ƒê√£ l∆∞u t·ª´ v·ª±ng v√†o server!");
    } else {
      print("‚ùå L·ªói khi l∆∞u t·ª´: ${response.body}");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF1F1F39),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Text(
          'K·∫øt qu·∫£ nh·∫≠n di·ªán',
          style: TextStyle(
            color: Colors.white,
            fontSize: 22,
            fontWeight: FontWeight.bold,
          ),
        ),
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // ·∫¢nh ƒë√£ nh·∫≠n di·ªán t·ª´ YOLOv10
            ClipRRect(
              borderRadius: BorderRadius.circular(16),
              child: Image.network(
                widget.detectedImageUrl +
                    "?t=${DateTime.now().millisecondsSinceEpoch}", // üî• Tr√°nh cache ·∫£nh c≈©
                height: 250,
                fit: BoxFit.cover,
              ),
            ),
            SizedBox(height: 20),

            // Ti√™u ƒë·ªÅ danh s√°ch t·ª´ v·ª±ng
            Text(
              "T·ª´ v·ª±ng nh·∫≠n di·ªán ƒë∆∞·ª£c:",
              style: TextStyle(
                color: Colors.white,
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 10),

            // Danh s√°ch t·ª´ v·ª±ng v√† nghƒ©a v·ªõi checkbox ƒë·ªÉ ch·ªçn t·ª´ c·∫ßn l∆∞u
            ListView.builder(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              itemCount: widget.words.length,
              itemBuilder: (context, index) {
                String word = widget.words[index];
                return CheckboxListTile(
                  value: _selectedWords.contains(word),
                  onChanged: (bool? selected) {
                    setState(() {
                      if (selected == true) {
                        _selectedWords.add(word);
                      } else {
                        _selectedWords.remove(word);
                      }
                    });
                  },
                  activeColor: Colors.green,
                  title: Row(
                    children: [
                      Expanded(
                        child: Text(
                          word,
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            fontFamily: "NotoSansIPA",
                          ),
                        ),
                      ),
                      IconButton(
                        icon: Icon(Icons.volume_up, color: Colors.white),
                        onPressed: () => _speak(word),
                      ),
                    ],
                  ),

                  subtitle: Text(
                    wordDefinitions[word] ?? "ƒêang t·∫£i...",
                    style: TextStyle(
                      color: Colors.white70,
                      fontSize: 14,
                      fontStyle: FontStyle.italic,
                      fontFamily: "NotoSansIPA",
                    ),
                  ),
                  controlAffinity:
                      ListTileControlAffinity
                          .leading, // Hi·ªÉn th·ªã checkbox b√™n tr√°i
                );
              },
            ),

            SizedBox(height: 20),

            // N√∫t l∆∞u t·ª´ v·ª±ng v√†o danh s√°ch √¥n t·∫≠p
            ElevatedButton(
              onPressed: () {
                if (_selectedWords.isNotEmpty) {
                  _saveToReview();
                  Navigator.pop(context);
                }
              },
              style: ElevatedButton.styleFrom(
                backgroundColor:
                    _selectedWords.isNotEmpty
                        ? Colors.blueAccent
                        : Colors.grey, // N√∫t x√°m n·∫øu ch∆∞a ch·ªçn t·ª´ n√†o
                padding: EdgeInsets.symmetric(vertical: 12, horizontal: 40),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              child: Text(
                "L∆∞u v√†o √¥n t·∫≠p",
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
